Q1.
#include <stdio.h>
#include <sys/types.h>
void
ChildProcess();
void ParentProcess();
void bubble(int[], int);
void insert(int[], int);

int main()
{

int i, n;
printf("How many values: ");
scanf("%d", &n);
int a[n];
printf("\nEnter actual values: ");
for (i = 0; i < n; i++)
scanf("%d", &a[i]);

pid_t pid;
pid = fork();

if (pid == 0)
{
ChildProcess();
insert(a, n);
printf("\nThe sorted array using Insertion sort in Child process is :\n");
for (i = 0; i < n; i++)
printf("\t%d", a[i]);
printf("\n");
}
else
{
ParentProcess();
bubble(a, n);
printf("\nThe sorted array using Bubble sort in Parent process is :\n");
for (i = 0; i < n; i++)
printf("\t%d", a[i]);
printf("\n");
wait();
}
return 0;
}

void ChildProcess()
{
printf("\nI am Child Process....\n");
printf("My Id is: %d\n", getpid());
}

void ParentProcess()
{
printf("\nI am Parent Process....\n");
printf("My Id is: %d\n", getppid());
}

void bubble(int x[], int n)
{
int i, pass, temp;
for (pass = 1; pass < n; pass++)
{
for (i = 0; i < n - 1; i++)
{
if (x[i] > x[i + 1])
{
temp = x[i];
x[i] = x[i + 1];
x[i + 1] = temp;
}
}
}
}

void insert(int x[], int n)
{
int i, k, key = 0;
for (k = 1; k < n; k++)
{
key = x[k];
for (i = k - 1; x[i] > key && i >= 0; i--)
{
x[i + 1] = x[i];
}
x[i + 1] = key;
}
}









Q2
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>

void
mk_token(char *s, char *tok[])
{
int i = 0;
char *p;
p = strtok(s, " ");
while (p != NULL)
{
tok[i++] = p;
p = strtok(NULL, " ");
}
tok[i] = NULL;
}

void count(char *fn, char op)
{
int fh, cc = 0, wc = 0, lc = 0;
char c;
fh = open(fn, O_RDONLY);
if (fh == -1)
{
printf("File %s is Not Found!!\n", fn);
return;
}
while (read(fh, &c, 1) > 0)
{
if (c == ' ')
wc++;
else if (c == '\n')
{
wc++;
lc++;
}
cc++;
}
close(fh);
switch (op)
{
case 'c':
printf("No. of characters = %d\n", cc);
break;
case 'w':
printf("No. of words = %d\n", wc);
break;
case 'l':
printf("No. of lines = %d\n", lc);
break;
default:
printf("Bad Command!!");
break;
}
}
int main()
{
int pid;
char ch;
char buff[80], *args[10];
printf("myshell$ ");
fflush(stdin);
fgets(buff, 80, stdin);
buff[strlen(buff) - 1] = '\0';
mk_token(buff, args);
if (strcmp(args[0], "count") == 0)
count(args[2], args[1][0]);

else
{
if (execvp(args[0], args) == -1)
printf("Command Not Found!!\nPlease Enter Proper Command\n");
}
return 0;
}
